import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import json

API_TOKEN = 'YOUR_BOT_TOKEN_HERE'
GROUP_CHAT_ID = -1002557567873

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

logging.basicConfig(level=logging.INFO)

CITIES = ["–ú—É—Ä–º–∞–Ω—Å–∫", "–ê–ø–∞—Ç–∏—Ç—ã", "–ö–∏—Ä–æ–≤—Å–∫"]

class AdminState(StatesGroup):
    login = State()
    password = State()
    city = State()
    name = State()
    price = State()
    desc = State()

admin_logged_in = {}

def load_products():
    with open("products.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_products(products):
    with open("products.json", "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for city in CITIES:
        markup.add(KeyboardButton(city))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)

@dp.message_handler(lambda msg: msg.text in CITIES)
async def show_products(message: types.Message):
    products = load_products()
    city = message.text
    if city not in products or not products[city]:
        await message.answer("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    for product in products[city]:
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order:{city}:{product['name']}"))
        await message.answer(f"üì¶ <b>{product['name']}</b>
üí∞ {product['price']}‚ÇΩ
üìù {product['desc']}", parse_mode="HTML", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("order:"))
async def order_handler(callback: types.CallbackQuery):
    _, city, name = callback.data.split(":")
    await bot.send_message(GROUP_CHAT_ID, f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
–ì–æ—Ä–æ–¥: {city}
–¢–æ–≤–∞—Ä: {name}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or callback.from_user.id}")
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@dp.message_handler(commands=['admin'])
async def admin_cmd(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await AdminState.login.set()

@dp.message_handler(state=AdminState.login)
async def admin_login(message: types.Message, state: FSMContext):
    if message.text == "admin":
        await state.update_data(login=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AdminState.password.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω.")

@dp.message_handler(state=AdminState.password)
async def admin_password(message: types.Message, state: FSMContext):
    if message.text == "program1029":
        admin_logged_in[message.from_user.id] = True
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!
–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:")
        await AdminState.city.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        await state.finish()

@dp.message_handler(state=AdminState.city)
async def admin_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AdminState.name.set()

@dp.message_handler(state=AdminState.name)
async def admin_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    await AdminState.price.set()

@dp.message_handler(state=AdminState.price)
async def admin_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await AdminState.desc.set()

@dp.message_handler(state=AdminState.desc)
async def admin_desc(message: types.Message, state: FSMContext):
    data = await state.get_data()
    products = load_products()
    city = data['city']
    new_item = {
        "name": data['name'],
        "price": data['price'],
        "desc": message.text
    }
    if city not in products:
        products[city] = []
    products[city].append(new_item)
    save_products(products)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)